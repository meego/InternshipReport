#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\usepackage{graphicx}
\usepackage{listings}
\usepackage{color}
\usepackage{xcolor}
\usepackage{caption}
\usepackage{url}

  \usepackage{courier}
  \lstset{
  	basicstyle=\scriptsize\ttfamily, % Standardschrift
  	%numbers=left,               % Ort der Zeilennummern
  	numberstyle=\tiny,          % Stil der Zeilennummern
  	%stepnumber=2,               % Abstand zwischen den Zeilennummern
  	numbersep=5pt,              % Abstand der Nummern zum Text
  	tabsize=2,                  % Groesse von Tabs
  	extendedchars=true,         %
  	breaklines=true,            % Zeilen werden Umgebrochen
  	keywordstyle=\color{red},
  	frame=b,         
  	%        keywordstyle=[1]\textbf,    % Stil der Keywords
  	%        keywordstyle=[2]\textbf,    %
  	%        keywordstyle=[3]\textbf,    %
  	%        keywordstyle=[4]\textbf,   \sqrt{\sqrt{}} %
  	stringstyle=\color{blue}\ttfamily, % Farbe der String
  	showspaces=false,           % Leerzeichen anzeigen ?
  	showtabs=false,             % Tabs anzeigen ?
  	xleftmargin=17pt,
  	framexleftmargin=17pt,
  	framexrightmargin=5pt,
  	framexbottommargin=4pt,
  	%backgroundcolor=\color{lightgray},
  	showstringspaces=false      % Leerzeichen in Strings anzeigen ?        
  }
  \lstloadlanguages{% Check Dokumentation for further languages ...
  	%[Visual]Basic
  	%Pascal
  	%C
  	%C++
  	%XML
  	%HTML
  	Python
  }
  %\DeclareCaptionFont{blue}{\color{blue}} 
  
  %\captionsetup[lstlisting]{singlelinecheck=false, labelfont={blue}, textfont={blue}}
  \usepackage{caption}
  
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{\colorbox{gray}{\parbox{\textwidth}{#1#2#3}}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white}

\hypersetup{
colorlinks=true,
filecolor =magenta,
urlcolor=magenta,
linkcolor=black,
citecolor=black,
runcolor=magenta	
}
\end_preamble
\use_default_options true
\begin_modules
eqs-within-sections
figs-within-sections
tabs-within-sections
\end_modules
\maintain_unincluded_children false
\language british
\language_package babel
\inputencoding latin9
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
The intention of this internship was to create a classifier for a given
 real-world application domain problem.
 It has to predict wether a pixel belongs to a cross section of a human
 brain or not.
 For this several problems had to be solved.
\end_layout

\begin_layout Standard
Because of the huge amount of data the preprocessing had to be done in parallel
 on a super computer.
 For this IPython was configured so that it is able to be started with the
 scheduler and create several engines.
 While IPython supports MPI, which is the most used framework on the super
 computers in JÃ¼lich, it is also possible to access the engines using the
 DirectView or LoadBalancedView classes of IPython.
 
\end_layout

\begin_layout Standard
After that feature extraction methods habe been applied taking related work
 from image segmentation methods into account.
 This contains pixel based features and local neighbours.
\end_layout

\begin_layout Standard
While Support Vector Machines were the focused method for classification
 during this intership some other popular approaches were used as well.
 The one with the best result is the Random Forest method, which is an ensemble
 method based on several randomized Decision Trees that are used for majority
 voting.
 Both Support Vector Machines and Random Forests can handle feature dependency
 and do not overfit as easily as other classifiers.
 A negative example would be Naive Bayes which despite its good training
 speed has a bad accuracy because it supposes feature indepency.
 
\end_layout

\begin_layout Standard
After optimizing the model with grid search, it is able to help the scientist
 by predicting an approximated cross section which can be corrected by hand.
 It can be easily used with the given IPython notebook.
 
\end_layout

\begin_layout Standard
While the notebook is based on scikit-learn and therefore a serial SVM implement
ation, a parallel approach was covered by testing the twister svm implementation.
 Although the cascade svm promises to increase the training time, this was
 not the case for the particular dataset used in the internship.
 Brain data is expected with new scanners with order of magnitude of better
 resolutions (i.e.
 bigger data) and as such this internship was a good proof-of-concept of
 evaluating different options.
 The used data sets are not large enough to show the advantages of a cascade
 svm.
 The second reason is that the twister implementation as well as the SVM
 implementation for twister are still a matter of ongoing research and not
 particularly userfriendly and optimized versions need to be developed.
 Because of this it was also not possible to test it on a larger training
 set.
\end_layout

\end_body
\end_document
