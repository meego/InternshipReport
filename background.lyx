#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\usepackage{graphicx}
\usepackage{listings}
\usepackage{color}
\usepackage{xcolor}
\usepackage{caption}
\usepackage{url}

  \usepackage{courier}
  \lstset{
  	basicstyle=\footnotesize\ttfamily, % Standardschrift
  	%numbers=left,               % Ort der Zeilennummern
  	numberstyle=\tiny,          % Stil der Zeilennummern
  	%stepnumber=2,               % Abstand zwischen den Zeilennummern
  	numbersep=5pt,              % Abstand der Nummern zum Text
  	tabsize=2,                  % Groesse von Tabs
  	extendedchars=true,         %
  	breaklines=true,            % Zeilen werden Umgebrochen
  	keywordstyle=\color{red},
  	frame=b,         
  	%        keywordstyle=[1]\textbf,    % Stil der Keywords
  	%        keywordstyle=[2]\textbf,    %
  	%        keywordstyle=[3]\textbf,    %
  	%        keywordstyle=[4]\textbf,   \sqrt{\sqrt{}} %
  	stringstyle=\color{white}\ttfamily, % Farbe der String
  	showspaces=false,           % Leerzeichen anzeigen ?
  	showtabs=false,             % Tabs anzeigen ?
  	xleftmargin=17pt,
  	framexleftmargin=17pt,
  	framexrightmargin=5pt,
  	framexbottommargin=4pt,
  	%backgroundcolor=\color{lightgray},
  	showstringspaces=false      % Leerzeichen in Strings anzeigen ?        
  }
  \lstloadlanguages{% Check Dokumentation for further languages ...
  	%[Visual]Basic
  	%Pascal
  	%C
  	%C++
  	%XML
  	%HTML
  	Java
  }
  %\DeclareCaptionFont{blue}{\color{blue}} 
  
  %\captionsetup[lstlisting]{singlelinecheck=false, labelfont={blue}, textfont={blue}}
  \usepackage{caption}
  
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{\colorbox{gray}{\parbox{\textwidth}{#1#2#3}}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white}
\end_preamble
\use_default_options true
\begin_modules
eqs-within-sections
figs-within-sections
tabs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Background
\end_layout

\begin_layout Standard
The primary programming language used during this internship is python.
 Python is a dynamic scripting language and provides many nice modules for
 scientific use cases like numpy and scipy.
 There are also some machine learning modules and the scikit-learn module
 
\begin_inset CommandInset citation
LatexCommand cite
key "sklearn"

\end_inset

 is one of the most used and stable ones.
 While python alone may not have the best performance, it is easy to improve
 it by using c or fortran code.
 This is done by most libraries.
 The serial support vector machine algorithms of scikit-learn are based
 on the well known libsvm library for example.
 This makes python and the scikit-learn module a good choice for classification
 tasks.
 
\end_layout

\begin_layout Standard
Some tasks are executed on a super computer at the Juelich Supercomputing
 Centre.
 It uses a PBS based batch system to handle the different jobs of users
 and distribute the available nodes.
 A popular method for distributed memory multiprocessing is MPI.
 It stands for message passing interface.
 The processes do not share any memory and therefore needed data has to
 be communicated over messages.
 This ranges from simple send and recieve functions to more complex ones
 like broadcast or scatter and gather functions.
 The left side of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "mpimap"

\end_inset

 shows a visualization of MPI multiprocessing.
 The red arrows are the messages that are passed between the processes,
 which are represented by the blue arrows.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename graphics/mpimap.png
	width 70text%

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
Multiprocessing on P1-P6 processors using MPI (left) and
\begin_inset Newline newline
\end_inset

on P1-P3 processors using map/reduce (right).
\begin_inset CommandInset label
LatexCommand label
name "mpimap"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An alternative to MPI based multiprocessing is the map/reduce approach used
 by hadoop and other frameworks.
 For this a distributed filesystem like the hadoop files system (hdfs) is
 needed.
 The data is split into subsets and distributed on the single machines.
 On each machine the same map job is executed on the local data set.
 The results of the map jobs are saved as key value pairs, so that the reducer
 jobs can further evaluate them.
 The number of algorithms that can profit from this method are limited because
 they need to be seperatable into a map and a reduce job.
 There are some frameworks that can handle more general algorithms.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[float,language=bash,caption=pbs.controller.template,label=pbs_temp
late]{./code/pbs.engine.template}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
IPython is an interactive python shell with many improvements.
 One of its most known features is the ipython notebook.
 It is browser based and supports code, text, mathematical expressions,
 plots and other media.
 Because of this it is often used in teaching or for reproducable science.
 Another feature is its capabiltiy of parallel computing.
 It supports different styles of parallelism like task or data parallelism
 and MPI.
 This allows parallelizing python code in an interactive python session
 and has a robust error handling.
 Furthermore the ipython clusters can be started with a PBS scheduler.
 
\end_layout

\begin_layout Standard
After setting up a profile and creating PBS templates (e.g.
 listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "pbs_template"

\end_inset

), you can start a cluster easily using:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
ipcluster~start~--profile=pbs~-n~8
\]

\end_inset


\end_layout

\begin_layout Standard
More information on ipython in general and the setup for parallel usage
 can be found at 
\begin_inset CommandInset citation
LatexCommand cite
key "ipython_doc"

\end_inset

.
\end_layout

\end_body
\end_document
